---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import Parser from 'rss-parser';

const FEEDS: { name: string; url: string }[] = [
  { name: 'UX Collective', url: 'https://uxdesign.cc/feed' },
  { name: 'OpenAI Blog', url: 'https://openai.com/blog/rss.xml' },
  { name: 'Google AI Blog', url: 'https://ai.googleblog.com/feeds/posts/default?alt=rss' },
  { name: 'Smashing Magazine â€“ AI', url: 'https://www.smashingmagazine.com/tag/ai/feed/' },
  // add/remove sources here
];

type Entry = {
  title: string;
  link: string;
  date: Date;
  source: string;
};

const parser = new Parser({
  timeout: 15000,
  headers: { 'User-Agent': 'aidesignfeeds.com (Astro RSS Aggregator)' },
});

async function getFeed(url: string, source: string): Promise<Entry[]> {
  try {
    const feed = await parser.parseURL(url);
    return (feed.items || []).map((item) => ({
      title: (item.title || 'Untitled').trim(),
      link: item.link || '#',
      date: item.isoDate ? new Date(item.isoDate) :
            item.pubDate ? new Date(item.pubDate) : new Date(0),
      source,
    }));
  } catch (e) {
    console.error(`Failed fetching ${source}:`, e);
    return [];
  }
}

const arrays = await Promise.all(FEEDS.map(f => getFeed(f.url, f.name)));
const entries = arrays.flat()
  .filter(e => e.link && e.title)
  .sort((a, b) => b.date.getTime() - a.date.getTime())
  .slice(0, 50);

function fmt(d: Date) {
  if (!d || isNaN(+d)) return '';
  return d.toLocaleDateString('en-US', { year:'numeric', month:'short', day:'numeric' });
}
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		<main style="max-width:960px;margin:0 auto;padding:2rem 1rem 4rem">
      <h1>ðŸ§  AI Ã— Design â€” Fresh Reads</h1>
      <p style="opacity:.8;margin:.25rem 0 1.5rem">
        Curated posts from top AI + Design sources. (Auto-updates when the site builds.)
      </p>

      <ul style="list-style:none;margin:0;padding:0;display:grid;gap:1rem">
        {entries.map((e) => (
          <li style="padding:1rem;border:1px solid #e5e7eb;border-radius:12px;background:#fff">
            <a href={e.link} target="_blank" rel="noopener noreferrer" style="font-weight:600;text-decoration:none">
              {e.title}
            </a>
            <div style="margin-top:.35rem;font-size:.9rem;opacity:.8;display:flex;gap:.5rem;align-items:center">
              <span style="padding:.15rem .5rem;border:1px solid #e5e7eb;border-radius:999px">{e.source}</span>
              <time datetime={e.date.toISOString()}>{fmt(e.date)}</time>
            </div>
          </li>
        ))}
      </ul>
		</main>
		<Footer />
	</body>
</html>
